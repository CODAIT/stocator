# object storage scheme details. Can be swift or cos
object.storage.scheme=cos

# <bucket> is existing bucket in the object storage. 
object.storage.output.container=<bucket>.service
object.storage.output.container.subdir=<any short identifier>

# stocator general configuration
client.impl=com.ibm.stocator.fs.cos.COSAPIClient
object.storage.impl=com.ibm.stocator.fs.ObjectStoreFileSystem

# if true, output.container will be merged with random number to make each container unique
object.storage.output.container.random.suffix=false

default.client.exec.timeout=500000
default.request.timeout=500000

# Access details to the swift object store
# auth.url=<AUTH_URL>
# public=true
# tenant=<TENANT>
# username=<USERNAME>
# auth.method=swiftauth
# password=<PASSWORD>

# Access details to the COS object storage

# COS endpoint
# endpoint=<ENDPOINT>

# COS HMAC authentication 
# access.key=<ACCESS KEY>
# secret.key=<SECRET KEY>
# v2.signer.type=false

# COS IAM  authentication
# If testing with iam.token comment out iam.api.key
# iam.api.key=<API KEY>
# iam.service.id=<SERVICE_ID>
# iam.token=<IAM TOKEN>